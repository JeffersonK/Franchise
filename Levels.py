from Globals import *
from Experience import *
import math
import sys
import locale
locale.setlocale(locale.LC_ALL, '')

gsLEVEL_STATPOINTS_PERLVL = 5
gsLEVEL_CASH_PERPRESTIGE_PERGAME = 100
gsLEVEL_NUM_STATPOINT_ABILITIES = 4
#gsXP_LEVELS = [0, 50, 100, 150, 200, 350, 600, 950, 1400, 1950, 2600, 3350, 4200, 5150, 6200, 7350, 8600, 9950, 11400, 12950, 14600, 16350, 18200, 20150, 22200, 24350, 26600, 28950, 31400, 33950, 36600, 39350, 42200, 45150, 48200, 51350, 54600, 57950, 61400, 64950, 68600, 72350, 76200, 80150, 84200, 88350, 92600, 96950, 101400, 105950, 110600, 115350, 120200, 125150, 130200, 135350, 140600, 145950, 151400, 156950, 162600, 168350, 174200, 180150, 186200, 192350, 198600, 204950, 211400, 217950, 224600, 231350, 238200, 245150, 252200, 259350, 266600, 273950, 281400, 288950, 296600, 304350, 312200, 320150, 328200, 336350, 344600, 352950, 361400, 369950, 378600, 387350, 396200, 405150, 414200, 423350, 432600, 441950, 451400, 460950, 470600, 480350, 490200, 500150, 510200, 520350, 530600, 540950, 551400, 561950, 572600, 583350, 594200, 605150, 616200, 627350, 638600, 649950, 661400, 672950, 684600, 696350, 708200, 720150, 732200, 744350, 756600, 768950, 781400, 793950, 806600, 819350, 832200, 845150, 858200, 871350, 884600, 897950, 911400, 924950, 938600, 952350, 966200, 980150, 994200, 1008350, 1022600, 1036950, 1051400, 1065950, 1080600, 1095350, 1110200, 1125150, 1140200, 1155350, 1170600, 1185950, 1201400, 1216950, 1232600, 1248350, 1264200, 1280150, 1296200, 1312350, 1328600, 1344950, 1361400, 1377950, 1394600, 1411350, 1428200, 1445150, 1462200, 1479350, 1496600, 1513950, 1531400, 1548950, 1566600, 1584350, 1602200, 1620150, 1638200, 1656350, 1674600, 1692950, 1711400, 1729950, 1748600, 1767350, 1786200, 1805150, 1824200, 1843350, 1862600, 1881950, 1901400, 1920950, 1940600, 1960350, 1980200, 2000150, 2020200, 2040350, 2060600, 2080950, 2101400, 2121950, 2142600, 2163350, 2184200, 2205150, 2226200, 2247350, 2268600, 2289950, 2311400, 2332950, 2354600, 2376350, 2398200, 2420150, 2442200, 2464350, 2486600, 2508950, 2531400, 2553950, 2576600, 2599350, 2622200, 2645150, 2668200, 2691350, 2714600, 2737950, 2761400, 2784950, 2808600, 2832350, 2856200, 2880150, 2904200, 2928350, 2952600, 2976950, 3001400, 3025950, 3050600, 3075350, 3100200, 3125150, 3150200, 3175350, 3200600, 3225950, 3251400, 3276950, 3302600, 3328350, 3354200, 3380150, 3406200, 3432350, 3458600, 3484950, 3511400, 3537950, 3564600, 3591350, 3618200, 3645150, 3672200, 3699350, 3726600, 3753950, 3781400, 3808950, 3836600, 3864350, 3892200, 3920150, 3948200, 3976350, 4004600, 4032950, 4061400, 4089950, 4118600, 4147350, 4176200, 4205150, 4234200, 4263350, 4292600, 4321950, 4351400, 4380950, 4410600, 4440350, 4470200, 4500150, 4530200, 4560350, 4590600, 4620950, 4651400, 4681950, 4712600, 4743350, 4774200, 4805150, 4836200, 4867350, 4898600, 4929950, 4961400, 4992950, 5024600, 5056350, 5088200, 5120150, 5152200, 5184350, 5216600, 5248950, 5281400, 5313950, 5346600, 5379350, 5412200, 5445150, 5478200, 5511350, 5544600, 5577950, 5611400, 5644950, 5678600, 5712350, 5746200, 5780150, 5814200, 5848350, 5882600, 5916950, 5951400, 5985950, 6020600, 6055350, 6090200, 6125150, 6160200, 6195350, 6230600, 6265950, 6301400, 6336950, 6372600, 6408350, 6444200, 6480150, 6516200, 6552350, 6588600, 6624950, 6661400, 6697950, 6734600, 6771350, 6808200, 6845150, 6882200, 6919350, 6956600, 6993950, 7031400, 7068950, 7106600, 7144350, 7182200, 7220150, 7258200, 7296350, 7334600, 7372950, 7411400, 7449950, 7488600, 7527350, 7566200, 7605150, 7644200, 7683350, 7722600, 7761950, 7801400, 7840950, 7880600, 7920350, 7960200, 8000150, 8040200, 8080350, 8120600, 8160950, 8201400, 8241950, 8282600, 8323350, 8364200, 8405150, 8446200, 8487350, 8528600, 8569950, 8611400, 8652950, 8694600, 8736350, 8778200, 8820150, 8862200, 8904350, 8946600, 8988950, 9031400, 9073950, 9116600, 9159350, 9202200, 9245150, 9288200, 9331350, 9374600, 9417950, 9461400, 9504950, 9548600, 9592350, 9636200, 9680150, 9724200, 9768350, 9812600, 9856950, 9901400, 9945950, 9990600, 10035350, 10080200, 10125150, 10170200, 10215350, 10260600, 10305950, 10351400, 10396950, 10442600, 10488350, 10534200, 10580150, 10626200, 10672350, 10718600, 10764950, 10811400, 10857950, 10904600, 10951350, 10998200, 11045150, 11092200, 11139350, 11186600, 11233950, 11281400, 11328950, 11376600, 11424350, 11472200, 11520150, 11568200, 11616350, 11664600, 11712950, 11761400, 11809950, 11858600, 11907350, 11956200, 12005150, 12054200, 12103350, 12152600, 12201950, 12251400, 12300950, 12350600, 12400350, 12450200, 12500150, 12550200, 12600350, 12650600, 12700950, 12751400, 12801950, 12852600, 12903350, 12954200, 13005150, 13056200, 13107350, 13158600, 13209950, 13261400, 13312950, 13364600, 13416350, 13468200, 13520150, 13572200, 13624350, 13676600, 13728950, 13781400, 13833950, 13886600, 13939350, 13992200, 14045150, 14098200, 14151350, 14204600, 14257950, 14311400, 14364950, 14418600, 14472350, 14526200, 14580150, 14634200, 14688350, 14742600, 14796950, 14851400, 14905950, 14960600, 15015350, 15070200, 15125150, 15180200, 15235350, 15290600, 15345950, 15401400, 15456950, 15512600, 15568350, 15624200, 15680150, 15736200, 15792350, 15848600, 15904950, 15961400, 16017950, 16074600, 16131350, 16188200, 16245150, 16302200, 16359350, 16416600, 16473950, 16531400, 16588950, 16646600, 16704350, 16762200, 16820150, 16878200, 16936350, 16994600, 17052950, 17111400, 17169950, 17228600, 17287350, 17346200, 17405150, 17464200, 17523350, 17582600, 17641950, 17701400, 17760950, 17820600, 17880350, 17940200, 18000150, 18060200, 18120350, 18180600, 18240950, 18301400, 18361950, 18422600, 18483350, 18544200, 18605150, 18666200, 18727350, 18788600, 18849950, 18911400, 18972950, 19034600, 19096350, 19158200, 19220150, 19282200, 19344350, 19406600, 19468950, 19531400, 19593950, 19656600, 19719350, 19782200, 19845150, 19908200, 19971350, 20034600, 20097950, 20161400, 20224950, 20288600, 20352350, 20416200, 20480150, 20544200, 20608350, 20672600, 20736950, 20801400, 20865950, 20930600, 20995350, 21060200, 21125150, 21190200, 21255350, 21320600, 21385950, 21451400, 21516950, 21582600, 21648350, 21714200, 21780150, 21846200, 21912350, 21978600, 22044950, 22111400, 22177950, 22244600, 22311350, 22378200, 22445150, 22512200, 22579350, 22646600, 22713950, 22781400, 22848950, 22916600, 22984350, 23052200, 23120150, 23188200, 23256350, 23324600, 23392950, 23461400, 23529950, 23598600, 23667350, 23736200, 23805150, 23874200, 23943350, 24012600, 24081950, 24151400, 24220950, 24290600, 24360350, 24430200, 24500150, 24570200, 24640350, 24710600, 24780950, 24851400, 24921950, 24992600, 25063350, 25134200, 25205150, 25276200, 25347350, 25418600, 25489950, 25561400, 25632950, 25704600, 25776350, 25848200, 25920150, 25992200, 26064350, 26136600, 26208950, 26281400, 26353950, 26426600, 26499350, 26572200, 26645150, 26718200, 26791350, 26864600, 26937950, 27011400, 27084950, 27158600, 27232350, 27306200, 27380150, 27454200, 27528350, 27602600, 27676950, 27751400, 27825950, 27900600, 27975350, 28050200, 28125150, 28200200, 28275350, 28350600, 28425950, 28501400, 28576950, 28652600, 28728350, 28804200, 28880150, 28956200, 29032350, 29108600, 29184950, 29261400, 29337950, 29414600, 29491350, 29568200, 29645150, 29722200, 29799350, 29876600, 29953950, 30031400, 30108950, 30186600, 30264350, 30342200, 30420150, 30498200, 30576350, 30654600, 30732950, 30811400, 30889950, 30968600, 31047350, 31126200, 31205150, 31284200, 31363350, 31442600, 31521950, 31601400, 31680950, 31760600, 31840350, 31920200, 32000150, 32080200, 32160350, 32240600, 32320950, 32401400, 32481950, 32562600, 32643350, 32724200, 32805150, 32886200, 32967350, 33048600, 33129950, 33211400, 33292950, 33374600, 33456350, 33538200, 33620150, 33702200, 33784350, 33866600, 33948950, 34031400, 34113950, 34196600, 34279350, 34362200, 34445150, 34528200, 34611350, 34694600, 34777950, 34861400, 34944950, 35028600, 35112350, 35196200, 35280150, 35364200, 35448350, 35532600, 35616950, 35701400, 35785950, 35870600, 35955350, 36040200, 36125150, 36210200, 36295350, 36380600, 36465950, 36551400, 36636950, 36722600, 36808350, 36894200, 36980150, 37066200, 37152350, 37238600, 37324950, 37411400, 37497950, 37584600, 37671350, 37758200, 37845150, 37932200, 38019350, 38106600, 38193950, 38281400, 38368950, 38456600, 38544350, 38632200, 38720150, 38808200, 38896350, 38984600, 39072950, 39161400, 39249950, 39338600, 39427350, 39516200, 39605150, 39694200, 39783350, 39872600, 39961950, 40051400, 40140950, 40230600, 40320350, 40410200, 40500150, 40590200, 40680350, 40770600, 40860950, 40951400, 41041950, 41132600, 41223350, 41314200, 41405150, 41496200, 41587350, 41678600, 41769950, 41861400, 41952950, 42044600, 42136350, 42228200, 42320150, 42412200, 42504350, 42596600, 42688950, 42781400, 42873950, 42966600, 43059350, 43152200, 43245150, 43338200, 43431350, 43524600, 43617950, 43711400, 43804950, 43898600, 43992350, 44086200, 44180150, 44274200, 44368350, 44462600, 44556950, 44651400, 44745950, 44840600, 44935350, 45030200, 45125150, 45220200, 45315350, 45410600, 45505950, 45601400, 45696950, 45792600, 45888350, 45984200, 46080150, 46176200, 46272350, 46368600, 46464950, 46561400, 46657950, 46754600, 46851350, 46948200, 47045150, 47142200, 47239350, 47336600, 47433950, 47531400, 47628950, 47726600, 47824350, 47922200, 48020150, 48118200, 48216350, 48314600, 48412950, 48511400, 48609950, 48708600, 48807350, 48906200, 49005150, 49104200, 49203350, 49302600, 49401950, 49501400, 49600950]
#gsXP_LEVELS = [0, 150, 400, 750, 1200, 1750, 2400, 3150, 4000, 4950, 6000, 7150, 8400, 9750, 11200, 12750, 14400, 16150, 18000, 19950, 22000, 24150, 26400, 28750, 31200, 33750, 36400, 39150, 42000, 44950, 48000, 51150, 54400, 57750, 61200, 64750, 68400, 72150, 76000, 79950, 84000, 88150, 92400, 96750, 101200, 105750, 110400, 115150, 120000, 124950, 130000, 135150, 140400, 145750, 151200, 156750, 162400, 168150, 174000, 179950, 186000, 192150, 198400, 204750, 211200, 217750, 224400, 231150, 238000, 244950, 252000, 259150, 266400, 273750, 281200, 288750, 296400, 304150, 312000, 319950, 328000, 336150, 344400, 352750, 361200, 369750, 378400, 387150, 396000, 404950, 414000, 423150, 432400, 441750, 451200, 460750, 470400, 480150, 490000, 499950]
gsXP_LEVELS = [0, 100, 250, 500, 850, 1300, 1850, 2500, 3250, 4100, 5050, 6100, 7250, 8500, 9850, 11300, 12850, 14500, 16250, 18100, 20050, 22100, 24250, 26500, 28850, 31300, 33850, 36500, 39250, 42100, 45050, 48100, 51250, 54500, 57850, 61300, 64850, 68500, 72250, 76100, 80050, 84100, 88250, 92500, 96850, 101300, 105850, 110500, 115250, 120100, 125050, 130100, 135250, 140500, 145850, 151300, 156850, 162500, 168250, 174100, 180050, 186100, 192250, 198500, 204850, 211300, 217850, 224500, 231250, 238100, 245050, 252100, 259250, 266500, 273850, 281300, 288850, 296500, 304250, 312100, 320050, 328100, 336250, 344500, 352850, 361300, 369850, 378500, 387250, 396100, 405050, 414100, 423250, 432500, 441850, 451300, 460850, 470500, 480250]


FACTOR = 1.05

def MoneyPerGameGivenLvlN(n):
    totStatPoints = n * gsLEVEL_STATPOINTS_PERLVL
    print "Max Cash Per Game: %s" % locale.currency(gsLEVEL_CASH_PERPRESTIGE_PERGAME * totStatPoints, grouping=True)
    print "Min Cash Per Game: %s" % locale.currency(gsPLAYER_INIT_PRESTIGE * gsLEVEL_CASH_PERPRESTIGE_PERGAME, grouping=True)
    print "Expected Cash Per Game: %s" % locale.currency((totStatPoints/gsLEVEL_NUM_STATPOINT_ABILITIES)*gsLEVEL_CASH_PERPRESTIGE_PERGAME, grouping=True)

#assuming min XP per game
#(maxGamesToLevel, maxTotGamesPlayed, maxCashEarned, worstTotTimeEagerPlayer, bestTotTimeEagerPlayer)
NGAMES_MORE = 10
#assume 4 stats points => MaxChallenge every level
def L(n):
    #if n == 1:
    #    return (0,0,0,0)
    if n == 3: #franks rule   
        maxCashEarned = 5*gsPLAYER_INIT_PRESTIGE * gsLEVEL_CASH_PERPRESTIGE_PERGAME
        worstTotTime = (5-gsPLAYERCHALLENGE_MAXINITIAL)*gsPLAYERRECOVERYTIME_INITIAL
        bestTotTime = 0#5-gsPLAYERCHALLENGE_MAXINITIAL+(n*2)
        return (5, (n-1)*5, maxCashEarned, worstTotTime, 0, [(n-1)*5*gsMIN_XP_PER_GAME])
    OLD = """
    if n == 2: #franks rule   
        maxCashEarned = 5*gsPLAYER_INIT_PRESTIGE * CASH_PERPRESTIGE_PERGAME
        worstTotTime = (5-gsPLAYERCHALLENGE_MAXINITIAL)*gsPLAYERRECOVERYTIME_INITIAL
        bestTotTime = 0#5-gsPLAYERCHALLENGE_MAXINITIAL+(n*2)
        return (5, 5, maxCashEarned, worstTotTime, 0, [5*gsMIN_XP_PER_GAME])

    if n <= 5: #franks rule   
        (last, sum, maxCash, worstTotTime, bestTotTime, XPlvls) = L(n-1)
        #print "%d: %d %d %d %d %d %s" %  (n, last, sum, maxCash, worstTotTime, bestTotTime, XPlvls)
        lastXPlvl = XPlvls[0]
        #assume no stat points have gone into challenge stat
        cashHere = (n*STATS_PER_LVL*CASH_PERPRESTIGE_PERGAME*(last))
        worstTimeHere = ((last) - gsPLAYERCHALLENGE_MAXINITIAL)*gsPLAYERRECOVERYTIME_INITIAL
        bestTimeHere = (last) - (gsPLAYERCHALLENGE_MAXINITIAL+(n*2))
        if bestTimeHere < 0:
            bestTimeHere = 0
        else:
            bestTimeHere *= gsPLAYERRECOVERYTIME_INITIAL
        
        return (5, #games to get to n from n-1
                5+sum,#totGames to n 
                maxCash + cashHere, 
                worstTotTime + worstTimeHere, 
                bestTotTime + bestTimeHere,
                XPlvls + [lastXPlvl + (last)*gsMIN_XP_PER_GAME])"""
        
    #else:
    #tmp = NGAMES_MORE
    (last, sum, maxCash, worstTotTime, bestTotTime, XPlvls) = L(n-1)
    #print "%d: (tmp=%d) %d %d %d %d %d %s" %  (n, tmp, last, sum, maxCash, worstTotTime, bestTotTime, XPlvls)
    lastXPlvl = XPlvls[-1]
    #print "%d %d lastXPlvl" % (n, lastXPlvl)
    #assume no stat points have gone into challenge stat
    cashHere = (n*gsLEVEL_STATPOINTS_PERLVL*gsLEVEL_CASH_PERPRESTIGE_PERGAME*(last+NGAMES_MORE))
    worstTimeHere = ((last+NGAMES_MORE) - gsPLAYERCHALLENGE_MAXINITIAL)*gsPLAYERRECOVERYTIME_INITIAL
    bestTimeHere = (last+NGAMES_MORE) - (gsPLAYERCHALLENGE_MAXINITIAL+(n*2))
    if bestTimeHere < 0:
        bestTimeHere = 0
    else:
        bestTimeHere *= gsPLAYERRECOVERYTIME_INITIAL
    return (last+NGAMES_MORE, #games to get to n from n-1
            last+NGAMES_MORE+sum,#totGames to n 
            maxCash + cashHere, 
            worstTotTime + worstTimeHere, 
            bestTotTime + bestTimeHere,
            XPlvls + [lastXPlvl + (last + NGAMES_MORE)*gsMIN_XP_PER_GAME])


#########
def main():
    n = int(sys.argv[1])
    print "Level N = %d" % n
#print L(int(sys.argv[1]))
    (maxGamesFromPrevLvl, maxTotGames, maxCashEarned, maxTimeEagerDude, minTimeEagerDude, XPlvls) = L(int(sys.argv[1]))
#MaxGamesToLvl = math.ceil(x)
#print x
    print "Max Games next Lvl@Lvl:%d : %d" % (n-1, maxGamesFromPrevLvl)
#float(MaxGamesToLvl*gsMIN_XP_PER_GAME)/float(gsMAX_XP_PER_GAME))
    print "Min Exp Need to Lvl @Lvl:%d: %d" % (n-1, maxGamesFromPrevLvl*gsMIN_XP_PER_GAME)
    minTotExpAtLvl = maxTotGames*gsMIN_XP_PER_GAME
    print "Min Total Exp to Level (Lvl:%d): %d" % (n, minTotExpAtLvl)
    print "Max Total Games Played to Lvl:%d: %d" % (n, maxTotGames)
    minTotGamesPlayed = math.ceil(minTotExpAtLvl/gsMAX_XP_PER_GAME)
    print "Min Total Games Played @Lvl:%d: %d" % (n, minTotGamesPlayed)
    print "Tot Stat Points Accrued (@Lvl:%d): %s" % (n, n*gsLEVEL_STATPOINTS_PERLVL)
    MoneyPerGameGivenLvlN(n)
    print "Min Total Cash Earned (@Lvl:%d): %s" % (n,locale.currency(minTotGamesPlayed*gsPLAYER_INIT_PRESTIGE * gsLEVEL_CASH_PERPRESTIGE_PERGAME, grouping=True))
#print "Max Total Cash Earned (@Lvl: %d)in game): %s" % (n,locale.currency(minTotGamesPlayed* n * STATS_PER_LVL * CASH_PERPRESTIGE_PERGAME, grouping=True))

    print maxTimeEagerDude/(60*60*24)
    print minTimeEagerDude/(60*60*24)
    print XPlvls


##########################
#Player Growth Model
#
#
#
##########################


#Level <= XP

#Level => +5 Stat points "Level ~ total stat points"

#Abilities <= Stat Points

#Abilities := {prestige, leadership, MaxEnergy, MaxChallenge}

#Game <= -1 Challenge point

#Game => (XP, $)

#Training <= ($, Energy)

#Training => Skills

#Skills := {ZoneMastery, PitchMastery, Pitcher(Control, Strength, Stamina), Batter(Power, Patience)}






#Items <= $

#Skill Boosts <= Items

#Stat Boosts <= Items


#Stat Points



if __name__ == "__main__":
    main()


### 

DEADCODE = """
def MaxGamesToLevel(n):
    #if n == 1:
    #    return (0, 0)
    if n <= 5:
        return (5, (n-1)*5)
    if n <= 100:
        (next, sum) = MaxGamesToLevel(n-1)
        #*1.01
        return (next+NGAMES_MORE, next+NGAMES_MORE+sum)
    
    if n <= 500:
        (next, sum) = MaxGamesToLevel(n-1)
        return (next*1.009, next+sum)
    (next, sum) = MaxGamesToLevel(n-1)#*FACTOR
    return (next*FACTOR, next+sum)

n = int(sys.argv[1])
print "Level N = %d" % n

(maxGamesFromPrevLvl, maxTotGames) = MaxGamesToLevel(n)
#MaxGamesToLvl = math.ceil(x)
#print x
print "Max Games next Lvl@Lvl:%d : %d" % (n-1, maxGamesFromPrevLvl)
#float(MaxGamesToLvl*gsMIN_XP_PER_GAME)/float(gsMAX_XP_PER_GAME))
print "Min Exp Need to Lvl @Lvl:%d: %d" % (n-1, maxGamesFromPrevLvl*gsMIN_XP_PER_GAME)
minTotExpAtLvl = maxTotGames*gsMIN_XP_PER_GAME
print "Min Total Exp to Level (Lvl:%d): %d" % (n, minTotExpAtLvl)
print "Max Total Games Played to Lvl:%d: %d" % (n, maxTotGames)
minTotGamesPlayed = math.ceil(minTotExpAtLvl/gsMAX_XP_PER_GAME)
print "Min Total Games Played @Lvl:%d: %d" % (n, minTotGamesPlayed)
print "Tot Stat Points Accrued (@Lvl:%d): %s" % (n, n*STATS_PER_LVL)
MoneyPerGameGivenLvlN(n)
print "Min Total Cash Earned (@Lvl:%d): %s" % (n,locale.currency(minTotGamesPlayed*gsPLAYER_INIT_PRESTIGE * CASH_PERPRESTIGE_PERGAME, grouping=True))
#print "Max Total Cash Earned (@Lvl: %d)in game): %s" % (n,locale.currency(minTotGamesPlayed* n * STATS_PER_LVL * CASH_PERPRESTIGE_PERGAME, grouping=True))
"""
