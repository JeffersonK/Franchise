from Globals import *
from Experience import *
import math
import sys
import locale
locale.setlocale(locale.LC_ALL, '')

gsLEVEL_STATPOINTS_PERLVL = 5
#gsLEVEL_CASH_PERPRESTIGE_PERGAME = 100
gsLEVEL_NUM_STATPOINT_ABILITIES = 4
#gsXP_LEVELS = [0, 50, 100, 150, 200, 350, 600, 950, 1400, 1950, 2600, 3350, 4200, 5150, 6200, 7350, 8600, 9950, 11400, 12950, 14600, 16350, 18200, 20150, 22200, 24350, 26600, 28950, 31400, 33950, 36600, 39350, 42200, 45150, 48200, 51350, 54600, 57950, 61400, 64950, 68600, 72350, 76200, 80150, 84200, 88350, 92600, 96950, 101400, 105950, 110600, 115350, 120200, 125150, 130200, 135350, 140600, 145950, 151400, 156950, 162600, 168350, 174200, 180150, 186200, 192350, 198600, 204950, 211400, 217950, 224600, 231350, 238200, 245150, 252200, 259350, 266600, 273950, 281400, 288950, 296600, 304350, 312200, 320150, 328200, 336350, 344600, 352950, 361400, 369950, 378600, 387350, 396200, 405150, 414200, 423350, 432600, 441950, 451400, 460950, 470600, 480350, 490200, 500150, 510200, 520350, 530600, 540950, 551400, 561950, 572600, 583350, 594200, 605150, 616200, 627350, 638600, 649950, 661400, 672950, 684600, 696350, 708200, 720150, 732200, 744350, 756600, 768950, 781400, 793950, 806600, 819350, 832200, 845150, 858200, 871350, 884600, 897950, 911400, 924950, 938600, 952350, 966200, 980150, 994200, 1008350, 1022600, 1036950, 1051400, 1065950, 1080600, 1095350, 1110200, 1125150, 1140200, 1155350, 1170600, 1185950, 1201400, 1216950, 1232600, 1248350, 1264200, 1280150, 1296200, 1312350, 1328600, 1344950, 1361400, 1377950, 1394600, 1411350, 1428200, 1445150, 1462200, 1479350, 1496600, 1513950, 1531400, 1548950, 1566600, 1584350, 1602200, 1620150, 1638200, 1656350, 1674600, 1692950, 1711400, 1729950, 1748600, 1767350, 1786200, 1805150, 1824200, 1843350, 1862600, 1881950, 1901400, 1920950, 1940600, 1960350, 1980200, 2000150, 2020200, 2040350, 2060600, 2080950, 2101400, 2121950, 2142600, 2163350, 2184200, 2205150, 2226200, 2247350, 2268600, 2289950, 2311400, 2332950, 2354600, 2376350, 2398200, 2420150, 2442200, 2464350, 2486600, 2508950, 2531400, 2553950, 2576600, 2599350, 2622200, 2645150, 2668200, 2691350, 2714600, 2737950, 2761400, 2784950, 2808600, 2832350, 2856200, 2880150, 2904200, 2928350, 2952600, 2976950, 3001400, 3025950, 3050600, 3075350, 3100200, 3125150, 3150200, 3175350, 3200600, 3225950, 3251400, 3276950, 3302600, 3328350, 3354200, 3380150, 3406200, 3432350, 3458600, 3484950, 3511400, 3537950, 3564600, 3591350, 3618200, 3645150, 3672200, 3699350, 3726600, 3753950, 3781400, 3808950, 3836600, 3864350, 3892200, 3920150, 3948200, 3976350, 4004600, 4032950, 4061400, 4089950, 4118600, 4147350, 4176200, 4205150, 4234200, 4263350, 4292600, 4321950, 4351400, 4380950, 4410600, 4440350, 4470200, 4500150, 4530200, 4560350, 4590600, 4620950, 4651400, 4681950, 4712600, 4743350, 4774200, 4805150, 4836200, 4867350, 4898600, 4929950, 4961400, 4992950, 5024600, 5056350, 5088200, 5120150, 5152200, 5184350, 5216600, 5248950, 5281400, 5313950, 5346600, 5379350, 5412200, 5445150, 5478200, 5511350, 5544600, 5577950, 5611400, 5644950, 5678600, 5712350, 5746200, 5780150, 5814200, 5848350, 5882600, 5916950, 5951400, 5985950, 6020600, 6055350, 6090200, 6125150, 6160200, 6195350, 6230600, 6265950, 6301400, 6336950, 6372600, 6408350, 6444200, 6480150, 6516200, 6552350, 6588600, 6624950, 6661400, 6697950, 6734600, 6771350, 6808200, 6845150, 6882200, 6919350, 6956600, 6993950, 7031400, 7068950, 7106600, 7144350, 7182200, 7220150, 7258200, 7296350, 7334600, 7372950, 7411400, 7449950, 7488600, 7527350, 7566200, 7605150, 7644200, 7683350, 7722600, 7761950, 7801400, 7840950, 7880600, 7920350, 7960200, 8000150, 8040200, 8080350, 8120600, 8160950, 8201400, 8241950, 8282600, 8323350, 8364200, 8405150, 8446200, 8487350, 8528600, 8569950, 8611400, 8652950, 8694600, 8736350, 8778200, 8820150, 8862200, 8904350, 8946600, 8988950, 9031400, 9073950, 9116600, 9159350, 9202200, 9245150, 9288200, 9331350, 9374600, 9417950, 9461400, 9504950, 9548600, 9592350, 9636200, 9680150, 9724200, 9768350, 9812600, 9856950, 9901400, 9945950, 9990600, 10035350, 10080200, 10125150, 10170200, 10215350, 10260600, 10305950, 10351400, 10396950, 10442600, 10488350, 10534200, 10580150, 10626200, 10672350, 10718600, 10764950, 10811400, 10857950, 10904600, 10951350, 10998200, 11045150, 11092200, 11139350, 11186600, 11233950, 11281400, 11328950, 11376600, 11424350, 11472200, 11520150, 11568200, 11616350, 11664600, 11712950, 11761400, 11809950, 11858600, 11907350, 11956200, 12005150, 12054200, 12103350, 12152600, 12201950, 12251400, 12300950, 12350600, 12400350, 12450200, 12500150, 12550200, 12600350, 12650600, 12700950, 12751400, 12801950, 12852600, 12903350, 12954200, 13005150, 13056200, 13107350, 13158600, 13209950, 13261400, 13312950, 13364600, 13416350, 13468200, 13520150, 13572200, 13624350, 13676600, 13728950, 13781400, 13833950, 13886600, 13939350, 13992200, 14045150, 14098200, 14151350, 14204600, 14257950, 14311400, 14364950, 14418600, 14472350, 14526200, 14580150, 14634200, 14688350, 14742600, 14796950, 14851400, 14905950, 14960600, 15015350, 15070200, 15125150, 15180200, 15235350, 15290600, 15345950, 15401400, 15456950, 15512600, 15568350, 15624200, 15680150, 15736200, 15792350, 15848600, 15904950, 15961400, 16017950, 16074600, 16131350, 16188200, 16245150, 16302200, 16359350, 16416600, 16473950, 16531400, 16588950, 16646600, 16704350, 16762200, 16820150, 16878200, 16936350, 16994600, 17052950, 17111400, 17169950, 17228600, 17287350, 17346200, 17405150, 17464200, 17523350, 17582600, 17641950, 17701400, 17760950, 17820600, 17880350, 17940200, 18000150, 18060200, 18120350, 18180600, 18240950, 18301400, 18361950, 18422600, 18483350, 18544200, 18605150, 18666200, 18727350, 18788600, 18849950, 18911400, 18972950, 19034600, 19096350, 19158200, 19220150, 19282200, 19344350, 19406600, 19468950, 19531400, 19593950, 19656600, 19719350, 19782200, 19845150, 19908200, 19971350, 20034600, 20097950, 20161400, 20224950, 20288600, 20352350, 20416200, 20480150, 20544200, 20608350, 20672600, 20736950, 20801400, 20865950, 20930600, 20995350, 21060200, 21125150, 21190200, 21255350, 21320600, 21385950, 21451400, 21516950, 21582600, 21648350, 21714200, 21780150, 21846200, 21912350, 21978600, 22044950, 22111400, 22177950, 22244600, 22311350, 22378200, 22445150, 22512200, 22579350, 22646600, 22713950, 22781400, 22848950, 22916600, 22984350, 23052200, 23120150, 23188200, 23256350, 23324600, 23392950, 23461400, 23529950, 23598600, 23667350, 23736200, 23805150, 23874200, 23943350, 24012600, 24081950, 24151400, 24220950, 24290600, 24360350, 24430200, 24500150, 24570200, 24640350, 24710600, 24780950, 24851400, 24921950, 24992600, 25063350, 25134200, 25205150, 25276200, 25347350, 25418600, 25489950, 25561400, 25632950, 25704600, 25776350, 25848200, 25920150, 25992200, 26064350, 26136600, 26208950, 26281400, 26353950, 26426600, 26499350, 26572200, 26645150, 26718200, 26791350, 26864600, 26937950, 27011400, 27084950, 27158600, 27232350, 27306200, 27380150, 27454200, 27528350, 27602600, 27676950, 27751400, 27825950, 27900600, 27975350, 28050200, 28125150, 28200200, 28275350, 28350600, 28425950, 28501400, 28576950, 28652600, 28728350, 28804200, 28880150, 28956200, 29032350, 29108600, 29184950, 29261400, 29337950, 29414600, 29491350, 29568200, 29645150, 29722200, 29799350, 29876600, 29953950, 30031400, 30108950, 30186600, 30264350, 30342200, 30420150, 30498200, 30576350, 30654600, 30732950, 30811400, 30889950, 30968600, 31047350, 31126200, 31205150, 31284200, 31363350, 31442600, 31521950, 31601400, 31680950, 31760600, 31840350, 31920200, 32000150, 32080200, 32160350, 32240600, 32320950, 32401400, 32481950, 32562600, 32643350, 32724200, 32805150, 32886200, 32967350, 33048600, 33129950, 33211400, 33292950, 33374600, 33456350, 33538200, 33620150, 33702200, 33784350, 33866600, 33948950, 34031400, 34113950, 34196600, 34279350, 34362200, 34445150, 34528200, 34611350, 34694600, 34777950, 34861400, 34944950, 35028600, 35112350, 35196200, 35280150, 35364200, 35448350, 35532600, 35616950, 35701400, 35785950, 35870600, 35955350, 36040200, 36125150, 36210200, 36295350, 36380600, 36465950, 36551400, 36636950, 36722600, 36808350, 36894200, 36980150, 37066200, 37152350, 37238600, 37324950, 37411400, 37497950, 37584600, 37671350, 37758200, 37845150, 37932200, 38019350, 38106600, 38193950, 38281400, 38368950, 38456600, 38544350, 38632200, 38720150, 38808200, 38896350, 38984600, 39072950, 39161400, 39249950, 39338600, 39427350, 39516200, 39605150, 39694200, 39783350, 39872600, 39961950, 40051400, 40140950, 40230600, 40320350, 40410200, 40500150, 40590200, 40680350, 40770600, 40860950, 40951400, 41041950, 41132600, 41223350, 41314200, 41405150, 41496200, 41587350, 41678600, 41769950, 41861400, 41952950, 42044600, 42136350, 42228200, 42320150, 42412200, 42504350, 42596600, 42688950, 42781400, 42873950, 42966600, 43059350, 43152200, 43245150, 43338200, 43431350, 43524600, 43617950, 43711400, 43804950, 43898600, 43992350, 44086200, 44180150, 44274200, 44368350, 44462600, 44556950, 44651400, 44745950, 44840600, 44935350, 45030200, 45125150, 45220200, 45315350, 45410600, 45505950, 45601400, 45696950, 45792600, 45888350, 45984200, 46080150, 46176200, 46272350, 46368600, 46464950, 46561400, 46657950, 46754600, 46851350, 46948200, 47045150, 47142200, 47239350, 47336600, 47433950, 47531400, 47628950, 47726600, 47824350, 47922200, 48020150, 48118200, 48216350, 48314600, 48412950, 48511400, 48609950, 48708600, 48807350, 48906200, 49005150, 49104200, 49203350, 49302600, 49401950, 49501400, 49600950]
#gsXP_LEVELS = [0, 150, 400, 750, 1200, 1750, 2400, 3150, 4000, 4950, 6000, 7150, 8400, 9750, 11200, 12750, 14400, 16150, 18000, 19950, 22000, 24150, 26400, 28750, 31200, 33750, 36400, 39150, 42000, 44950, 48000, 51150, 54400, 57750, 61200, 64750, 68400, 72150, 76000, 79950, 84000, 88150, 92400, 96750, 101200, 105750, 110400, 115150, 120000, 124950, 130000, 135150, 140400, 145750, 151200, 156750, 162400, 168150, 174000, 179950, 186000, 192150, 198400, 204750, 211200, 217750, 224400, 231150, 238000, 244950, 252000, 259150, 266400, 273750, 281200, 288750, 296400, 304150, 312000, 319950, 328000, 336150, 344400, 352750, 361200, 369750, 378400, 387150, 396000, 404950, 414000, 423150, 432400, 441750, 451200, 460750, 470400, 480150, 490000, 499950]
#gsXP_LEVELS = [0, 100, 250, 500, 850, 1300, 1850, 2500, 3250, 4100, 5050, 6100, 7250, 8500, 9850, 11300, 12850, 14500, 16250, 18100, 20050, 22100, 24250, 26500, 28850, 31300, 33850, 36500, 39250, 42100, 45050, 48100, 51250, 54500, 57850, 61300, 64850, 68500, 72250, 76100, 80050, 84100, 88250, 92500, 96850, 101300, 105850, 110500, 115250, 120100, 125050, 130100, 135250, 140500, 145850, 151300, 156850, 162500, 168250, 174100, 180050, 186100, 192250, 198500, 204850, 211300, 217850, 224500, 231250, 238100, 245050, 252100, 259250, 266500, 273850, 281300, 288850, 296500, 304250, 312100, 320050, 328100, 336250, 344500, 352850, 361300, 369850, 378500, 387250, 396100, 405050, 414100, 423250, 432500, 441850, 451300, 460850, 470500, 480250]
gsXP_LEVELS = [0, 50, 180, 390, 680, 1050, 1500, 2030, 2640, 3330, 4100, 4950, 5880, 6890, 7980, 9150, 10400, 11730, 13140, 14630, 16200, 17850, 19580, 21390, 23280, 25250, 27300, 29430, 31640, 33930, 36300, 38750, 41280, 43890, 46580, 49350, 52200, 55130, 58140, 61230, 64400, 67650, 70980, 74390, 77880, 81450, 85100, 88830, 92640, 96530, 100500, 104550, 108680, 112890, 117180, 121550, 126000, 130530, 135140, 139830, 144600, 149450, 154380, 159390, 164480, 169650, 174900, 180230, 185640, 191130, 196700, 202350, 208080, 213890, 219780, 225750, 231800, 237930, 244140, 250430, 256800, 263250, 269780, 276390, 283080, 289850, 296700, 303630, 310640, 317730, 324900, 332150, 339480, 346890, 354380, 361950, 369600, 377330, 385140, 393030, 401000, 409050, 417180, 425390, 433680, 442050, 450500, 459030, 467640, 476330, 485100, 493950, 502880, 511890, 520980, 530150, 539400, 548730, 558140, 567630, 577200, 586850, 596580, 606390, 616280, 626250, 636300, 646430, 656640, 666930, 677300, 687750, 698280, 708890, 719580, 730350, 741200, 752130, 763140, 774230, 785400, 796650, 807980, 819390, 830880, 842450, 854100, 865830, 877640, 889530, 901500, 913550, 925680, 937890, 950180, 962550, 975000, 987530, 1000140, 1012830, 1025600, 1038450, 1051380, 1064390, 1077480, 1090650, 1103900, 1117230, 1130640, 1144130, 1157700, 1171350, 1185080, 1198890, 1212780, 1226750, 1240800, 1254930, 1269140, 1283430, 1297800, 1312250, 1326780, 1341390, 1356080, 1370850, 1385700, 1400630, 1415640, 1430730, 1445900, 1461150, 1476480, 1491890, 1507380, 1522950, 1538600, 1554330, 1570140, 1586030, 1602000, 1618050, 1634180, 1650390, 1666680, 1683050, 1699500, 1716030, 1732640, 1749330, 1766100, 1782950, 1799880, 1816890, 1833980, 1851150, 1868400, 1885730, 1903140, 1920630, 1938200, 1955850, 1973580, 1991390, 2009280, 2027250, 2045300, 2063430, 2081640, 2099930, 2118300, 2136750, 2155280, 2173890, 2192580, 2211350, 2230200, 2249130, 2268140, 2287230, 2306400, 2325650, 2344980, 2364390, 2383880, 2403450, 2423100, 2442830, 2462640, 2482530, 2502500, 2522550, 2542680, 2562890, 2583180, 2603550, 2624000, 2644530, 2665140, 2685830, 2706600, 2727450, 2748380, 2769390, 2790480, 2811650, 2832900, 2854230, 2875640, 2897130, 2918700, 2940350, 2962080, 2983890, 3005780, 3027750, 3049800, 3071930, 3094140, 3116430, 3138800, 3161250, 3183780, 3206390, 3229080, 3251850, 3274700, 3297630, 3320640, 3343730, 3366900, 3390150, 3413480, 3436890, 3460380, 3483950, 3507600, 3531330, 3555140, 3579030, 3603000, 3627050, 3651180, 3675390, 3699680, 3724050, 3748500, 3773030, 3797640, 3822330, 3847100, 3871950, 3896880, 3921890, 3946980, 3972150, 3997400, 4022730, 4048140, 4073630, 4099200, 4124850, 4150580, 4176390, 4202280, 4228250, 4254300, 4280430, 4306640, 4332930, 4359300, 4385750, 4412280, 4438890, 4465580, 4492350, 4519200, 4546130, 4573140, 4600230, 4627400, 4654650, 4681980, 4709390, 4736880, 4764450, 4792100, 4819830, 4847640, 4875530, 4903500, 4931550, 4959680, 4987890, 5016180, 5044550, 5073000, 5101530, 5130140, 5158830, 5187600, 5216450, 5245380, 5274390, 5303480, 5332650, 5361900, 5391230, 5420640, 5450130, 5479700, 5509350, 5539080, 5568890, 5598780, 5628750, 5658800, 5688930, 5719140, 5749430, 5779800, 5810250, 5840780, 5871390, 5902080, 5932850, 5963700, 5994630, 6025640, 6056730, 6087900, 6119150, 6150480, 6181890, 6213380, 6244950, 6276600, 6308330, 6340140, 6372030, 6404000, 6436050, 6468180, 6500390, 6532680, 6565050, 6597500, 6630030, 6662640, 6695330, 6728100, 6760950, 6793880, 6826890, 6859980, 6893150, 6926400, 6959730, 6993140, 7026630, 7060200, 7093850, 7127580, 7161390, 7195280, 7229250, 7263300, 7297430, 7331640, 7365930, 7400300, 7434750, 7469280, 7503890, 7538580, 7573350, 7608200, 7643130, 7678140, 7713230, 7748400, 7783650, 7818980, 7854390, 7889880, 7925450, 7961100, 7996830, 8032640, 8068530, 8104500, 8140550, 8176680, 8212890, 8249180, 8285550, 8322000, 8358530, 8395140, 8431830, 8468600, 8505450, 8542380, 8579390, 8616480, 8653650, 8690900, 8728230, 8765640, 8803130, 8840700, 8878350, 8916080, 8953890, 8991780, 9029750, 9067800, 9105930, 9144140, 9182430, 9220800, 9259250, 9297780, 9336390, 9375080, 9413850, 9452700, 9491630, 9530640, 9569730, 9608900, 9648150, 9687480, 9726890, 9766380, 9805950, 9845600, 9885330, 9925140, 9965030, 10005000, 10045050, 10085180, 10125390, 10165680, 10206050, 10246500, 10287030, 10327640, 10368330, 10409100, 10449950, 10490880, 10531890, 10572980, 10614150, 10655400, 10696730, 10738140, 10779630, 10821200, 10862850, 10904580, 10946390, 10988280, 11030250, 11072300, 11114430, 11156640, 11198930, 11241300, 11283750, 11326280, 11368890, 11411580, 11454350, 11497200, 11540130, 11583140, 11626230, 11669400, 11712650, 11755980, 11799390, 11842880, 11886450, 11930100, 11973830, 12017640, 12061530, 12105500, 12149550, 12193680, 12237890, 12282180, 12326550, 12371000, 12415530, 12460140, 12504830, 12549600, 12594450, 12639380, 12684390, 12729480, 12774650, 12819900, 12865230, 12910640, 12956130, 13001700, 13047350, 13093080, 13138890, 13184780, 13230750, 13276800, 13322930, 13369140, 13415430, 13461800, 13508250, 13554780, 13601390, 13648080, 13694850, 13741700, 13788630, 13835640, 13882730, 13929900, 13977150, 14024480, 14071890, 14119380, 14166950, 14214600, 14262330, 14310140, 14358030, 14406000, 14454050, 14502180, 14550390, 14598680, 14647050, 14695500, 14744030, 14792640, 14841330, 14890100, 14938950, 14987880, 15036890, 15085980, 15135150, 15184400, 15233730, 15283140, 15332630, 15382200, 15431850, 15481580, 15531390, 15581280, 15631250, 15681300, 15731430, 15781640, 15831930, 15882300, 15932750, 15983280, 16033890, 16084580, 16135350, 16186200, 16237130, 16288140, 16339230, 16390400, 16441650, 16492980, 16544390, 16595880, 16647450, 16699100, 16750830, 16802640, 16854530, 16906500, 16958550, 17010680, 17062890, 17115180, 17167550, 17220000, 17272530, 17325140, 17377830, 17430600, 17483450, 17536380, 17589390, 17642480, 17695650, 17748900, 17802230, 17855640, 17909130, 17962700, 18016350, 18070080, 18123890, 18177780, 18231750, 18285800, 18339930, 18394140, 18448430, 18502800, 18557250, 18611780, 18666390, 18721080, 18775850, 18830700, 18885630, 18940640, 18995730, 19050900, 19106150, 19161480, 19216890, 19272380, 19327950, 19383600, 19439330, 19495140, 19551030, 19607000, 19663050, 19719180, 19775390, 19831680, 19888050, 19944500, 20001030, 20057640, 20114330, 20171100, 20227950, 20284880, 20341890, 20398980, 20456150, 20513400, 20570730, 20628140, 20685630, 20743200, 20800850, 20858580, 20916390, 20974280, 21032250, 21090300, 21148430, 21206640, 21264930, 21323300, 21381750, 21440280, 21498890, 21557580, 21616350, 21675200, 21734130, 21793140, 21852230, 21911400, 21970650, 22029980, 22089390, 22148880, 22208450, 22268100, 22327830, 22387640, 22447530, 22507500, 22567550, 22627680, 22687890, 22748180, 22808550, 22869000, 22929530, 22990140, 23050830, 23111600, 23172450, 23233380, 23294390, 23355480, 23416650, 23477900, 23539230, 23600640, 23662130, 23723700, 23785350, 23847080, 23908890, 23970780, 24032750, 24094800, 24156930, 24219140, 24281430, 24343800, 24406250, 24468780, 24531390, 24594080, 24656850, 24719700, 24782630, 24845640, 24908730, 24971900, 25035150, 25098480, 25161890, 25225380, 25288950, 25352600, 25416330, 25480140, 25544030, 25608000, 25672050, 25736180, 25800390, 25864680, 25929050, 25993500, 26058030, 26122640, 26187330, 26252100, 26316950, 26381880, 26446890, 26511980, 26577150, 26642400, 26707730, 26773140, 26838630, 26904200, 26969850, 27035580, 27101390, 27167280, 27233250, 27299300, 27365430, 27431640, 27497930, 27564300, 27630750, 27697280, 27763890, 27830580, 27897350, 27964200, 28031130, 28098140, 28165230, 28232400, 28299650, 28366980, 28434390, 28501880, 28569450, 28637100, 28704830, 28772640, 28840530, 28908500, 28976550, 29044680, 29112890, 29181180, 29249550, 29318000, 29386530, 29455140, 29523830, 29592600, 29661450, 29730380, 29799390, 29868480, 29937650, 30006900, 30076230, 30145640, 30215130, 30284700, 30354350, 30424080, 30493890, 30563780, 30633750, 30703800, 30773930, 30844140, 30914430, 30984800, 31055250, 31125780, 31196390, 31267080, 31337850, 31408700, 31479630, 31550640, 31621730, 31692900, 31764150, 31835480, 31906890, 31978380, 32049950, 32121600, 32193330, 32265140, 32337030, 32409000, 32481050, 32553180, 32625390, 32697680, 32770050, 32842500, 32915030, 32987640, 33060330, 33133100, 33205950, 33278880, 33351890, 33424980, 33498150, 33571400, 33644730, 33718140, 33791630, 33865200, 33938850, 34012580, 34086390, 34160280, 34234250, 34308300, 34382430, 34456640, 34530930, 34605300, 34679750, 34754280, 34828890, 34903580, 34978350, 35053200, 35128130, 35203140, 35278230, 35353400, 35428650, 35503980, 35579390, 35654880, 35730450, 35806100, 35881830, 35957640, 36033530, 36109500, 36185550, 36261680, 36337890, 36414180, 36490550, 36567000, 36643530, 36720140, 36796830, 36873600, 36950450, 37027380, 37104390, 37181480, 37258650, 37335900, 37413230, 37490640, 37568130, 37645700, 37723350, 37801080, 37878890, 37956780, 38034750, 38112800, 38190930, 38269140, 38347430, 38425800, 38504250, 38582780, 38661390, 38740080, 38818850, 38897700, 38976630, 39055640, 39134730, 39213900, 39293150, 39372480, 39451890, 39531380, 39610950, 39690600, 39770330, 39850140]


FACTOR = 1.05

def MoneyPerGameGivenLvlN(n):
    totStatPoints = n * gsLEVEL_STATPOINTS_PERLVL
    print "Max Cash Per Game: %s" % locale.currency(gsLEVEL_CASH_PERPRESTIGE_PERGAME * totStatPoints, grouping=True)
    print "Min Cash Per Game: %s" % locale.currency(gsPLAYER_INIT_PRESTIGE * gsLEVEL_CASH_PERPRESTIGE_PERGAME, grouping=True)
    print "Expected Cash Per Game: %s" % locale.currency((totStatPoints/gsLEVEL_NUM_STATPOINT_ABILITIES)*gsLEVEL_CASH_PERPRESTIGE_PERGAME, grouping=True)

#assuming min XP per game
#(maxGamesToLevel, maxTotGamesPlayed, maxCashEarned, worstTotTimeEagerPlayer, bestTotTimeEagerPlayer)
NGAMES_MORE = 8
#assume 4 stats points => MaxChallenge every level
def L(n):
    #if n == 1:
    #    return (0,0,0,0)
    if n == 2: #franks rule   
        maxCashEarned = 5*gsPLAYER_INIT_PRESTIGE * gsLEVEL_CASH_PERPRESTIGE_PERGAME
        worstTotTime = (5-gsPLAYERCHALLENGE_MAXINITIAL)*gsPLAYERRECOVERYTIME_INITIAL
        bestTotTime = 0#5-gsPLAYERCHALLENGE_MAXINITIAL+(n*2)
        return (5, (n-1)*5, maxCashEarned, worstTotTime, 0, [0, (n-1)*5*gsMIN_XP_PER_GAME])
    OLD = """
    if n == 2: #franks rule   
        maxCashEarned = 5*gsPLAYER_INIT_PRESTIGE * CASH_PERPRESTIGE_PERGAME
        worstTotTime = (5-gsPLAYERCHALLENGE_MAXINITIAL)*gsPLAYERRECOVERYTIME_INITIAL
        bestTotTime = 0#5-gsPLAYERCHALLENGE_MAXINITIAL+(n*2)
        return (5, 5, maxCashEarned, worstTotTime, 0, [5*gsMIN_XP_PER_GAME])

    if n <= 5: #franks rule   
        (last, sum, maxCash, worstTotTime, bestTotTime, XPlvls) = L(n-1)
        #print "%d: %d %d %d %d %d %s" %  (n, last, sum, maxCash, worstTotTime, bestTotTime, XPlvls)
        lastXPlvl = XPlvls[0]
        #assume no stat points have gone into challenge stat
        cashHere = (n*STATS_PER_LVL*CASH_PERPRESTIGE_PERGAME*(last))
        worstTimeHere = ((last) - gsPLAYERCHALLENGE_MAXINITIAL)*gsPLAYERRECOVERYTIME_INITIAL
        bestTimeHere = (last) - (gsPLAYERCHALLENGE_MAXINITIAL+(n*2))
        if bestTimeHere < 0:
            bestTimeHere = 0
        else:
            bestTimeHere *= gsPLAYERRECOVERYTIME_INITIAL
        
        return (5, #games to get to n from n-1
                5+sum,#totGames to n 
                maxCash + cashHere, 
                worstTotTime + worstTimeHere, 
                bestTotTime + bestTimeHere,
                XPlvls + [lastXPlvl + (last)*gsMIN_XP_PER_GAME])"""
        
    #else:
    #tmp = NGAMES_MORE
    (last, sum, maxCash, worstTotTime, bestTotTime, XPlvls) = L(n-1)
    #print "%d: (tmp=%d) %d %d %d %d %d %s" %  (n, tmp, last, sum, maxCash, worstTotTime, bestTotTime, XPlvls)
    lastXPlvl = XPlvls[-1]
    #print "%d %d lastXPlvl" % (n, lastXPlvl)
    #assume no stat points have gone into challenge stat
    cashHere = (n*gsLEVEL_STATPOINTS_PERLVL*gsLEVEL_CASH_PERPRESTIGE_PERGAME*(last+NGAMES_MORE))
    worstTimeHere = ((last+NGAMES_MORE) - gsPLAYERCHALLENGE_MAXINITIAL)*gsPLAYERRECOVERYTIME_INITIAL
    bestTimeHere = (last+NGAMES_MORE) - (gsPLAYERCHALLENGE_MAXINITIAL+(n*2))
    if bestTimeHere < 0:
        bestTimeHere = 0
    else:
        bestTimeHere *= gsPLAYERRECOVERYTIME_INITIAL
    return (last+NGAMES_MORE, #games to get to n from n-1
            last+NGAMES_MORE+sum,#totGames to n 
            maxCash + cashHere, 
            worstTotTime + worstTimeHere, 
            bestTotTime + bestTimeHere,
            XPlvls + [lastXPlvl + (last + NGAMES_MORE)*gsMIN_XP_PER_GAME])


#########
def main():
    n = int(sys.argv[1])
    print "Level N = %d" % n
#print L(int(sys.argv[1]))
    (maxGamesFromPrevLvl, maxTotGames, maxCashEarned, maxTimeEagerDude, minTimeEagerDude, XPlvls) = L(int(sys.argv[1]))
#MaxGamesToLvl = math.ceil(x)
#print x
    print "Max Games next Lvl@Lvl:%d : %d" % (n-1, maxGamesFromPrevLvl)
#float(MaxGamesToLvl*gsMIN_XP_PER_GAME)/float(gsMAX_XP_PER_GAME))
    print "Min Exp Need to Lvl @Lvl:%d: %d" % (n-1, maxGamesFromPrevLvl*gsMIN_XP_PER_GAME)
    minTotExpAtLvl = maxTotGames*gsMIN_XP_PER_GAME
    print "Min Total Exp to Level (Lvl:%d): %d" % (n, minTotExpAtLvl)
    print "Max Total Games Played to Lvl:%d: %d" % (n, maxTotGames)
    minTotGamesPlayed = math.ceil(minTotExpAtLvl/gsMAX_XP_PER_GAME)
    print "Min Total Games Played @Lvl:%d: %d" % (n, minTotGamesPlayed)
    print "Tot Stat Points Accrued (@Lvl:%d): %s" % (n, n*gsLEVEL_STATPOINTS_PERLVL)
    MoneyPerGameGivenLvlN(n)
    print "Min Total Cash Earned (@Lvl:%d): %s" % (n,locale.currency(minTotGamesPlayed*gsPLAYER_INIT_PRESTIGE * gsLEVEL_CASH_PERPRESTIGE_PERGAME, grouping=True))
#print "Max Total Cash Earned (@Lvl: %d)in game): %s" % (n,locale.currency(minTotGamesPlayed* n * STATS_PER_LVL * CASH_PERPRESTIGE_PERGAME, grouping=True))

    print maxTimeEagerDude/(60*60*24)
    print minTimeEagerDude/(60*60*24)
    print XPlvls


##########################
#Player Growth Model
#
#
#
##########################


#Level <= XP

#Level => +5 Stat points "Level ~ total stat points"

#Abilities <= Stat Points

#Abilities := {prestige, leadership, MaxEnergy, MaxChallenge}

#Game <= -1 Challenge point

#Game => (XP, $)

#Training <= ($, Energy)

#Training => Skills

#Skills := {ZoneMastery, PitchMastery, Pitcher(Control, Strength, Stamina), Batter(Power, Patience)}






#Items <= $

#Skill Boosts <= Items

#Stat Boosts <= Items


#Stat Points



if __name__ == "__main__":
    main()


### 

DEADCODE = """
def MaxGamesToLevel(n):
    #if n == 1:
    #    return (0, 0)
    if n <= 5:
        return (5, (n-1)*5)
    if n <= 100:
        (next, sum) = MaxGamesToLevel(n-1)
        #*1.01
        return (next+NGAMES_MORE, next+NGAMES_MORE+sum)
    
    if n <= 500:
        (next, sum) = MaxGamesToLevel(n-1)
        return (next*1.009, next+sum)
    (next, sum) = MaxGamesToLevel(n-1)#*FACTOR
    return (next*FACTOR, next+sum)

n = int(sys.argv[1])
print "Level N = %d" % n

(maxGamesFromPrevLvl, maxTotGames) = MaxGamesToLevel(n)
#MaxGamesToLvl = math.ceil(x)
#print x
print "Max Games next Lvl@Lvl:%d : %d" % (n-1, maxGamesFromPrevLvl)
#float(MaxGamesToLvl*gsMIN_XP_PER_GAME)/float(gsMAX_XP_PER_GAME))
print "Min Exp Need to Lvl @Lvl:%d: %d" % (n-1, maxGamesFromPrevLvl*gsMIN_XP_PER_GAME)
minTotExpAtLvl = maxTotGames*gsMIN_XP_PER_GAME
print "Min Total Exp to Level (Lvl:%d): %d" % (n, minTotExpAtLvl)
print "Max Total Games Played to Lvl:%d: %d" % (n, maxTotGames)
minTotGamesPlayed = math.ceil(minTotExpAtLvl/gsMAX_XP_PER_GAME)
print "Min Total Games Played @Lvl:%d: %d" % (n, minTotGamesPlayed)
print "Tot Stat Points Accrued (@Lvl:%d): %s" % (n, n*STATS_PER_LVL)
MoneyPerGameGivenLvlN(n)
print "Min Total Cash Earned (@Lvl:%d): %s" % (n,locale.currency(minTotGamesPlayed*gsPLAYER_INIT_PRESTIGE * CASH_PERPRESTIGE_PERGAME, grouping=True))
#print "Max Total Cash Earned (@Lvl: %d)in game): %s" % (n,locale.currency(minTotGamesPlayed* n * STATS_PER_LVL * CASH_PERPRESTIGE_PERGAME, grouping=True))
"""
